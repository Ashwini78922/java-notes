Inheritance:
----------------
1. The term “inheritance” refers to a situation where behaviors and attributes are passed on from one object to another. 
The Java programming language natively only supports compile-time inheritance through subclassing with the keyword “extends”.

2. Runtime inheritance refers to the ability to construct the parent/child hierarchy at runtime. Java does not natively 
support runtime inheritance, but there is an alternative concept known as “delegation” or “composition”, which refers to
 constructing a hierarchy of object instances at runtime. This allows you to simulate runtime inheritance.

3. Inheritance is a polymorphic tool and is not a code reuse tool. Some developers tend to use inheritance for code reuse
 when there is no polymorphic relationship. The guide is that inheritance should be only used when a subclass ‘is a’ 
super class.
	-Don’t use inheritance just to get code reuse. If there is no ‘is a’ relationship then use composition for code reuse. 
Overuse of implementation inheritance (uses the “extends” key word) can break all the subclasses, if the super class is 
modified. This is due to tight coupling occurring between the parent and the child classes happening at compile time.
	-Do not use inheritance just to get polymorphism. If there is no ‘is a’ relationship and all you want is polymorphism 
then use interface inheritance with composition, which gives you code reuse and runtime flexibility.